@{
    Layout = "_Layout";
    ViewData["Title"] = "Результаты по дням";
}

<style>
    .table-container {
        background-color: #ffffff;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        overflow: hidden;
    }

    .table-container table {
        width: 100%;
        border-collapse: collapse;
    }

    .table-container th,
    .table-container td {
        padding: 12px;
        text-align: center;
        border-bottom: 1px solid #e2e8f0;
    }

    .table-container th {
        background-color: #4a5568;
        color: #ffffff;
        font-weight: bold;
    }

    .table-container tr:hover {
        background-color: #f7fafc;
    }

    .table-container tfoot td {
        font-weight: bold;
        background-color: #edf2f7;
    }

    .total-row {
        font-family: 'Arial', sans-serif;
        font-size: 1.1em;
        color: #2d3748;
    }

    .input-date {
        border: 1px solid #cbd5e0;
        border-radius: 4px;
        padding: 8px;
        font-size: 1em;
    }

    .search-input {
        width: 100%;
        padding: 8px;
        border: 1px solid #cbd5e0;
        border-radius: 4px;
        font-size: 1em;
    }

    .search-results {
        border: 1px solid #cbd5e0;
        border-radius: 4px;
        margin-top: 8px;
        background-color: #ffffff;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .search-results li {
        padding: 8px;
        cursor: pointer;
    }

    .search-results li:hover {
        background-color: #f7fafc;
    }

    .product-details {
        background-color: #ffffff;
        border: 1px solid #cbd5e0;
        border-radius: 8px;
        padding: 16px;
        margin-top: 16px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .add-product-btn {
        background-color: #4299e1;
        color: #ffffff;
        padding: 8px 16px;
        border-radius: 4px;
        cursor: pointer;
        font-size: 1em;
        border: none;
    }

    .add-product-btn:hover {
        background-color: #3182ce;
    }
</style>

<div class="container mx-auto p-6">
    <!-- Заголовок с датой -->
    <h1 class="text-2xl font-bold mb-4">Продукты за <input type="date" id="selectedDate" value="@ViewBag.SelectedDate" class="input-date"></h1>

    <!-- Поле поиска продукта -->
    <div class="mb-4">
        <label for="productSearch" class="block text-sm font-medium">Введите название продукта</label>
        <input type="text" id="productSearch" class="search-input" placeholder="Начните вводить...">
        <ul id="searchResults" class="search-results hidden"></ul>
    </div>

    <!-- Форма добавления продукта -->
    <div id="productDetails" class="product-details hidden">
        <h2 class="text-lg font-semibold">Детали продукта</h2>
        <p id="productName"></p>

        <div class="mt-3">
            <label class="block text-sm font-medium">Вес (граммы)</label>
            <input type="number" id="productWeight" class="search-input" min="1">
        </div>

        <div class="mt-3 grid grid-cols-2 gap-2">
            <div><strong>Калории:</strong> <span id="productCalories">-</span></div>
            <div><strong>Белки:</strong> <span id="productProtein">-</span></div>
            <div><strong>Жиры:</strong> <span id="productFats">-</span></div>
            <div><strong>Углеводы:</strong> <span id="productCarbs">-</span></div>
        </div>

        <button id="addProductBtn" class="add-product-btn mt-4">
            Добавить продукт
        </button>
    </div>

    <!-- Таблица с добавленными продуктами -->
    <div class="mt-6 table-container">
        <h2 class="text-lg font-semibold mb-2">Список съеденных продуктов</h2>
        <table>
            <thead>
                <tr>
                    <th>Название</th>
                    <th>Вес (г)</th>
                    <th>Калории</th>
                    <th>Белки</th>
                    <th>Жиры</th>
                    <th>Углеводы</th>
                </tr>
            </thead>
            <tbody id="productsTable">
                @foreach (var product in ViewBag.Products)
                {
                    <tr>
                        <td>@product.Name</td>
                        <td>@product.Weight</td>
                        <td>@product.Calories</td>
                        <td>@product.Protein</td>
                        <td>@product.Fats</td>
                        <td>@product.Carbohydrates</td>
                    </tr>
                }
            </tbody>
            <tfoot>
                <tr class="total-row">
                    <td>Итого:</td>
                    <td id="totalWeight"></td>
                    <td id="totalCalories"></td>
                    <td id="totalProtein"></td>
                    <td id="totalFats"></td>
                    <td id="totalCarbs"></td>
                </tr>
            </tfoot>
        </table>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        let selectedDate = document.getElementById("selectedDate");
        let searchInput = document.getElementById("productSearch");
        let searchResults = document.getElementById("searchResults");
        let productDetails = document.getElementById("productDetails");
        let productNameElem = document.getElementById("productName");
        let productWeight = document.getElementById("productWeight");
        let productCalories = document.getElementById("productCalories");
        let productProtein = document.getElementById("productProtein");
        let productFats = document.getElementById("productFats");
        let productCarbs = document.getElementById("productCarbs");
        let addProductBtn = document.getElementById("addProductBtn");
        let productsTable = document.getElementById("productsTable");

        let selectedProduct = null;

        // Обновление таблицы при изменении даты
        selectedDate.addEventListener("change", async function () {
            let date = this.value;
            let response = await fetch(`/FoodCul/GetProductsForDay?date=${date}`);
            let data = await response.json();

            if (data.statusCode === 0) {
                productsTable.innerHTML = "";
                data.products.forEach(product => {
                    let row = `<tr>
                        <td>${product.name}</td>
                        <td>${product.weight}</td>
                        <td>${product.calories}</td>
                        <td>${product.protein}</td>
                        <td>${product.fats}</td>
                        <td>${product.carbohydrates}</td>
                    </tr>`;
                    productsTable.innerHTML += row;
                });
                calculateTotals();
            }
        });

        // Автопоиск продуктов
        searchInput.addEventListener("input", async function () {
            let query = this.value.trim();
            if (query.length < 2) {
                searchResults.classList.add("hidden");
                return;
            }

            let response = await fetch('/FoodCul/GetProducts');
            let data = await response.json();

            if (data.statusCode === 0) {
                let filteredProducts = data.products.filter(p =>
                    p.name.toLowerCase().includes(query.toLowerCase())
                );

                searchResults.innerHTML = "";
                searchResults.classList.remove("hidden");

                filteredProducts.forEach(product => {
                    let li = document.createElement("li");
                    li.textContent = product.name;
                    li.classList.add("p-2", "hover:bg-gray-100", "cursor-pointer");
                    li.addEventListener("click", () => selectProduct(product));
                    searchResults.appendChild(li);
                });
            }
        });

        function selectProduct(product) {
            selectedProduct = product;
            searchInput.value = product.name;
            searchResults.classList.add("hidden");

            productDetails.classList.remove("hidden");
            productNameElem.textContent = product.name;
            productWeight.value = "";
            productCalories.textContent = "-";
            productProtein.textContent = "-";
            productFats.textContent = "-";
            productCarbs.textContent = "-";
        }

        // Пересчет БЖУ и калорийности при вводе веса
        productWeight.addEventListener("input", function () {
            let weight = parseFloat(this.value);
            if (isNaN(weight) || weight <= 0 || !selectedProduct) return;

            let factor = weight / 100;
            productCalories.textContent = (selectedProduct.calories * factor).toFixed(2);
            productProtein.textContent = (selectedProduct.protein * factor).toFixed(2);
            productFats.textContent = (selectedProduct.fats * factor).toFixed(2);
            productCarbs.textContent = (selectedProduct.carbohydrates * factor).toFixed(2);
        });

        // Добавление продукта в таблицу
        addProductBtn.addEventListener("click", async function () {
            let weight = parseInt(productWeight.value);
            if (!selectedProduct || isNaN(weight) || weight <= 0) {
                alert("Введите корректный вес продукта!");
                return;
            }

            let response = await fetch("/FoodCul/AddProductForDay", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    date: selectedDate.value,
                    weight: weight,
                    name: selectedProduct.name
                })
            });

            let data = await response.json();
            if (data.statusCode === 0) {
                let row = `<tr>
                    <td>${data.product.name}</td>
                    <td>${data.product.weight}</td>
                    <td>${data.product.calories}</td>
                    <td>${data.product.protein}</td>
                    <td>${data.product.fats}</td>
                    <td>${data.product.carbohydrates}</td>
                </tr>`;
                productsTable.innerHTML += row;
                productDetails.classList.add("hidden");
                calculateTotals();
            } else {
                alert(data.description);
            }
        });

        // Функция для подсчета итоговых значений
        function calculateTotals() {
            let totalWeight = 0;
            let totalCalories = 0;
            let totalProtein = 0;
            let totalFats = 0;
            let totalCarbs = 0;

            let rows = productsTable.getElementsByTagName("tr");
            for (let row of rows) {
                let cells = row.getElementsByTagName("td");
                if (cells.length === 6) {
                    totalWeight += parseFloat(cells[1].textContent);
                    totalCalories += parseFloat(cells[2].textContent);
                    totalProtein += parseFloat(cells[3].textContent);
                    totalFats += parseFloat(cells[4].textContent);
                    totalCarbs += parseFloat(cells[5].textContent);
                }
            }

            document.getElementById("totalWeight").textContent = totalWeight.toFixed(2);
            document.getElementById("totalCalories").textContent = totalCalories.toFixed(2);
            document.getElementById("totalProtein").textContent = totalProtein.toFixed(2);
            document.getElementById("totalFats").textContent = totalFats.toFixed(2);
            document.getElementById("totalCarbs").textContent = totalCarbs.toFixed(2);
        }

        // Инициализация подсчета итоговых значений
        calculateTotals();
    });
</script>